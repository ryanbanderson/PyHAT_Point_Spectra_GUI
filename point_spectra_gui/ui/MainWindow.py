# -*- coding: utf-8 -*-

# Automatically generated - don't edit.
# Use `python setup.py build_ui` to update it.

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea.setLineWidth(0)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setAlignment(QtCore.Qt.AlignCenter)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 807, 295))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setEnabled(True)
        self.textBrowser.setMaximumSize(QtCore.QSize(16777215, 150))
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout.addWidget(self.textBrowser)
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout.addWidget(self.progressBar)
        self.progress_OK = QtWidgets.QHBoxLayout()
        self.progress_OK.setObjectName("progress_OK")
        self.refreshModulePushButton = QtWidgets.QPushButton(self.centralwidget)
        self.refreshModulePushButton.setObjectName("refreshModulePushButton")
        self.progress_OK.addWidget(self.refreshModulePushButton)
        self.undoModulePushButton = QtWidgets.QPushButton(self.centralwidget)
        self.undoModulePushButton.setObjectName("undoModulePushButton")
        self.progress_OK.addWidget(self.undoModulePushButton)
        self.stopPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.stopPushButton.setObjectName("stopPushButton")
        self.progress_OK.addWidget(self.stopPushButton)
        self.insertModuleComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.insertModuleComboBox.setMinimumSize(QtCore.QSize(86, 0))
        self.insertModuleComboBox.setObjectName("insertModuleComboBox")
        self.insertModuleComboBox.addItem("")
        self.progress_OK.addWidget(self.insertModuleComboBox)
        self.deleteModuleComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.deleteModuleComboBox.setMinimumSize(QtCore.QSize(86, 0))
        self.deleteModuleComboBox.setObjectName("deleteModuleComboBox")
        self.deleteModuleComboBox.addItem("")
        self.progress_OK.addWidget(self.deleteModuleComboBox)
        self.okPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.okPushButton.setObjectName("okPushButton")
        self.progress_OK.addWidget(self.okPushButton)
        self.verticalLayout.addLayout(self.progress_OK)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 850, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuPreprocessing = QtWidgets.QMenu(self.menubar)
        self.menuPreprocessing.setObjectName("menuPreprocessing")
        self.menuRegression = QtWidgets.QMenu(self.menubar)
        self.menuRegression.setObjectName("menuRegression")
        self.menuVisualization = QtWidgets.QMenu(self.menubar)
        self.menuVisualization.setObjectName("menuVisualization")
        self.menuClassification = QtWidgets.QMenu(self.menubar)
        self.menuClassification.setObjectName("menuClassification")
        self.menuData = QtWidgets.QMenu(self.menubar)
        self.menuData.setObjectName("menuData")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionRead_ChemCam_Data = QtWidgets.QAction(MainWindow)
        self.actionRead_ChemCam_Data.setObjectName("actionRead_ChemCam_Data")
        self.actionLoad_Data = QtWidgets.QAction(MainWindow)
        self.actionLoad_Data.setObjectName("actionLoad_Data")
        self.actionSet_Output_Path = QtWidgets.QAction(MainWindow)
        self.actionSet_Output_Path.setObjectName("actionSet_Output_Path")
        self.actionSave_Current_Data = QtWidgets.QAction(MainWindow)
        self.actionSave_Current_Data.setObjectName("actionSave_Current_Data")
        self.actionCreate_New_Workflow = QtWidgets.QAction(MainWindow)
        self.actionCreate_New_Workflow.setObjectName("actionCreate_New_Workflow")
        self.actionRestore_Workflow = QtWidgets.QAction(MainWindow)
        self.actionRestore_Workflow.setObjectName("actionRestore_Workflow")
        self.actionSave_Current_Workflow = QtWidgets.QAction(MainWindow)
        self.actionSave_Current_Workflow.setObjectName("actionSave_Current_Workflow")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionRemove_Rows = QtWidgets.QAction(MainWindow)
        self.actionRemove_Rows.setObjectName("actionRemove_Rows")
        self.actionSplit_Data = QtWidgets.QAction(MainWindow)
        self.actionSplit_Data.setObjectName("actionSplit_Data")
        self.actionResample = QtWidgets.QAction(MainWindow)
        self.actionResample.setObjectName("actionResample")
        self.actionRemove_Baseline = QtWidgets.QAction(MainWindow)
        self.actionRemove_Baseline.setObjectName("actionRemove_Baseline")
        self.actionApply_Mask = QtWidgets.QAction(MainWindow)
        self.actionApply_Mask.setObjectName("actionApply_Mask")
        self.actionPeak_Areas = QtWidgets.QAction(MainWindow)
        self.actionPeak_Areas.setObjectName("actionPeak_Areas")
        self.actionMultiply_by_Vector = QtWidgets.QAction(MainWindow)
        self.actionMultiply_by_Vector.setObjectName("actionMultiply_by_Vector")
        self.actionNormalization = QtWidgets.QAction(MainWindow)
        self.actionNormalization.setObjectName("actionNormalization")
        self.actionDimensionality_Reduction = QtWidgets.QAction(MainWindow)
        self.actionDimensionality_Reduction.setObjectName("actionDimensionality_Reduction")
        self.actionStratified_Folds = QtWidgets.QAction(MainWindow)
        self.actionStratified_Folds.setObjectName("actionStratified_Folds")
        self.actionCross_Validation = QtWidgets.QAction(MainWindow)
        self.actionCross_Validation.setObjectName("actionCross_Validation")
        self.actionTrain = QtWidgets.QAction(MainWindow)
        self.actionTrain.setObjectName("actionTrain")
        self.actionSubmodel_Blend = QtWidgets.QAction(MainWindow)
        self.actionSubmodel_Blend.setObjectName("actionSubmodel_Blend")
        self.actionPredict = QtWidgets.QAction(MainWindow)
        self.actionPredict.setObjectName("actionPredict")
        self.actionPlot = QtWidgets.QAction(MainWindow)
        self.actionPlot.setObjectName("actionPlot")
        self.actionPlot_Spectra = QtWidgets.QAction(MainWindow)
        self.actionPlot_Spectra.setObjectName("actionPlot_Spectra")
        self.actionPlot_ICA_PCA = QtWidgets.QAction(MainWindow)
        self.actionPlot_ICA_PCA.setObjectName("actionPlot_ICA_PCA")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionAbout_Qt = QtWidgets.QAction(MainWindow)
        self.actionAbout_Qt.setObjectName("actionAbout_Qt")
        self.actionOpen_Workflow = QtWidgets.QAction(MainWindow)
        self.actionOpen_Workflow.setObjectName("actionOpen_Workflow")
        self.actionOn_2 = QtWidgets.QAction(MainWindow)
        self.actionOn_2.setObjectName("actionOn_2")
        self.actionOff_2 = QtWidgets.QAction(MainWindow)
        self.actionOff_2.setObjectName("actionOff_2")
        self.actionRename_Data = QtWidgets.QAction(MainWindow)
        self.actionRename_Data.setObjectName("actionRename_Data")
        self.actionQtmodern = QtWidgets.QAction(MainWindow)
        self.actionQtmodern.setObjectName("actionQtmodern")
        self.actionDefault = QtWidgets.QAction(MainWindow)
        self.actionDefault.setObjectName("actionDefault")
        self.actionOn = QtWidgets.QAction(MainWindow)
        self.actionOn.setObjectName("actionOn")
        self.actionOff = QtWidgets.QAction(MainWindow)
        self.actionOff.setObjectName("actionOff")
        self.actionBrace_yourself = QtWidgets.QAction(MainWindow)
        self.actionBrace_yourself.setObjectName("actionBrace_yourself")
        self.actionClear_Workflow = QtWidgets.QAction(MainWindow)
        self.actionClear_Workflow.setObjectName("actionClear_Workflow")
        self.actionSpectral_Derivative = QtWidgets.QAction(MainWindow)
        self.actionSpectral_Derivative.setObjectName("actionSpectral_Derivative")
        self.actionData_Box = QtWidgets.QAction(MainWindow)
        self.actionData_Box.setObjectName("actionData_Box")
        self.actionCombine_Data_Sets = QtWidgets.QAction(MainWindow)
        self.actionCombine_Data_Sets.setObjectName("actionCombine_Data_Sets")
        self.actionOutlier_Removal = QtWidgets.QAction(MainWindow)
        self.actionOutlier_Removal.setObjectName("actionOutlier_Removal")
        self.actionSave_Trained_Model = QtWidgets.QAction(MainWindow)
        self.actionSave_Trained_Model.setObjectName("actionSave_Trained_Model")
        self.actionRestore_Trained_Model = QtWidgets.QAction(MainWindow)
        self.actionRestore_Trained_Model.setObjectName("actionRestore_Trained_Model")
        self.actionSupervised = QtWidgets.QAction(MainWindow)
        self.actionSupervised.setObjectName("actionSupervised")
        self.actionK_means = QtWidgets.QAction(MainWindow)
        self.actionK_means.setObjectName("actionK_means")
        self.actionCluster = QtWidgets.QAction(MainWindow)
        self.actionCluster.setObjectName("actionCluster")
        self.actionLook_Up_Metadata = QtWidgets.QAction(MainWindow)
        self.actionLook_Up_Metadata.setObjectName("actionLook_Up_Metadata")
        self.actionLocal_Regression = QtWidgets.QAction(MainWindow)
        self.actionLocal_Regression.setObjectName("actionLocal_Regression")
        self.actionWavelength_Shift = QtWidgets.QAction(MainWindow)
        self.actionWavelength_Shift.setObjectName("actionWavelength_Shift")
        self.actionPlot_testmodule = QtWidgets.QAction(MainWindow)
        self.actionPlot_testmodule.setObjectName("actionPlot_testmodule")
        self.actionCalibration_Transfer = QtWidgets.QAction(MainWindow)
        self.actionCalibration_Transfer.setObjectName("actionCalibration_Transfer")
        self.actionCalibration_Transfer_CV = QtWidgets.QAction(MainWindow)
        self.actionCalibration_Transfer_CV.setObjectName("actionCalibration_Transfer_CV")
        self.actionSave_Regression_Model = QtWidgets.QAction(MainWindow)
        self.actionSave_Regression_Model.setObjectName("actionSave_Regression_Model")
        self.actionRestore_Regression_Model = QtWidgets.QAction(MainWindow)
        self.actionRestore_Regression_Model.setObjectName("actionRestore_Regression_Model")
        self.actionStandardize_Data = QtWidgets.QAction(MainWindow)
        self.actionStandardize_Data.setObjectName("actionStandardize_Data")
        self.menuFile.addAction(self.actionRestore_Workflow)
        self.menuFile.addAction(self.actionSave_Current_Workflow)
        self.menuFile.addAction(self.actionCreate_New_Workflow)
        self.menuFile.addAction(self.actionExit)
        self.menuPreprocessing.addAction(self.actionResample)
        self.menuPreprocessing.addAction(self.actionRemove_Baseline)
        self.menuPreprocessing.addAction(self.actionApply_Mask)
        self.menuPreprocessing.addAction(self.actionPeak_Areas)
        self.menuPreprocessing.addAction(self.actionMultiply_by_Vector)
        self.menuPreprocessing.addAction(self.actionNormalization)
        self.menuPreprocessing.addAction(self.actionStandardize_Data)
        self.menuPreprocessing.addAction(self.actionDimensionality_Reduction)
        self.menuPreprocessing.addAction(self.actionSpectral_Derivative)
        self.menuPreprocessing.addAction(self.actionWavelength_Shift)
        self.menuPreprocessing.addAction(self.actionCalibration_Transfer)
        self.menuPreprocessing.addAction(self.actionCalibration_Transfer_CV)
        self.menuRegression.addAction(self.actionCross_Validation)
        self.menuRegression.addAction(self.actionTrain)
        self.menuRegression.addAction(self.actionPredict)
        self.menuRegression.addAction(self.actionLocal_Regression)
        self.menuRegression.addAction(self.actionSubmodel_Blend)
        self.menuRegression.addAction(self.actionSave_Trained_Model)
        self.menuRegression.addAction(self.actionRestore_Trained_Model)
        self.menuVisualization.addAction(self.actionPlot)
        self.menuVisualization.addAction(self.actionPlot_Spectra)
        self.menuVisualization.addAction(self.actionPlot_ICA_PCA)
        self.menuClassification.addAction(self.actionSupervised)
        self.menuClassification.addAction(self.actionCluster)
        self.menuData.addAction(self.actionLoad_Data)
        self.menuData.addAction(self.actionSave_Current_Data)
        self.menuData.addAction(self.actionRead_ChemCam_Data)
        self.menuData.addAction(self.actionRename_Data)
        self.menuData.addAction(self.actionLook_Up_Metadata)
        self.menuData.addAction(self.actionRemove_Rows)
        self.menuData.addAction(self.actionCombine_Data_Sets)
        self.menuData.addAction(self.actionOutlier_Removal)
        self.menuData.addAction(self.actionSplit_Data)
        self.menuData.addAction(self.actionStratified_Folds)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuData.menuAction())
        self.menubar.addAction(self.menuPreprocessing.menuAction())
        self.menubar.addAction(self.menuClassification.menuAction())
        self.menubar.addAction(self.menuRegression.menuAction())
        self.menubar.addAction(self.menuVisualization.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(("PyHAT Point Spectra GUI"))
        self.textBrowser.setToolTip(("<html><head/><body><p>Console window<br/>This window gives you information about your running module<br/>Errors will also show up here, if they occur</p></body></html>"))
        self.progressBar.setToolTip(("<html><head/><body><p>Your current progression.</p></body></html>"))
        self.progressBar.setFormat(("%p%"))
        self.refreshModulePushButton.setToolTip(_translate("MainWindow", "<html><head/><body>\n"
"<p>Refresh the modules</p>\n"
"<p>This will update all the modules so they contain relevant information from previous modules.\n"
"</body></html>"))
        self.refreshModulePushButton.setText(("Refresh"))
        self.undoModulePushButton.setToolTip(("<html><head/><body><p>Re-run your last run module</p></body></html>"))
        self.undoModulePushButton.setText(("Re-run"))
        self.stopPushButton.setToolTip(("<html><head/><body><p>Completely stop the currently running module</p></body></html>"))
        self.stopPushButton.setText(("Stop"))
        self.insertModuleComboBox.setItemText(0, ("Insert After"))
        self.deleteModuleComboBox.setItemText(0, ("Delete"))
        self.okPushButton.setToolTip(("<html><head/><body><p>Press this button when you are ready to run the modules in your workflow</p></body></html>"))
        self.okPushButton.setWhatsThis(("Press this button when you\'re ready to run. (Ctrl+Enter)"))
        self.okPushButton.setText(("OK"))
        self.menuFile.setTitle(("Workflow"))
        self.menuPreprocessing.setTitle(("Preprocessing"))
        self.menuRegression.setTitle(("Regression"))
        self.menuVisualization.setTitle(("Visualization"))
        self.menuClassification.setTitle(("Classification"))
        self.menuData.setTitle(("Data"))
        self.actionRead_ChemCam_Data.setText(("Load ChemCam Data"))
        self.actionLoad_Data.setText(("Load CSV Data"))
        self.actionSet_Output_Path.setText(("Set Output Path"))
        self.actionSave_Current_Data.setText(("Save Data to CSV"))
        self.actionCreate_New_Workflow.setText(("New Window"))
        self.actionRestore_Workflow.setText(("Restore Workflow"))
        self.actionSave_Current_Workflow.setText(("Save Workflow"))
        self.actionExit.setText(("Exit"))
        self.actionRemove_Rows.setText(("Remove Rows"))
        self.actionSplit_Data.setText(("Split Data"))
        self.actionResample.setText(("Resample"))
        self.actionRemove_Baseline.setText(("Remove Baseline"))
        self.actionApply_Mask.setText(("Apply Mask"))
        self.actionPeak_Areas.setText(("Peak Areas"))
        self.actionMultiply_by_Vector.setText(("Multiply by Vector"))
        self.actionNormalization.setText(("Normalize"))
        self.actionDimensionality_Reduction.setText(("Dimensionality Reduction"))
        self.actionStratified_Folds.setText(("Stratified Folds"))
        self.actionCross_Validation.setText(("Cross Validation"))
        self.actionTrain.setText(("Regression Train"))
        self.actionSubmodel_Blend.setText(("Blend Submodel Predictions"))
        self.actionPredict.setText(("Regression Predict"))
        self.actionPlot.setText(("Plot"))
        self.actionPlot_Spectra.setText(("Plot Spectra"))
        self.actionPlot_ICA_PCA.setText(("Plot ICA/PCA"))
        self.actionAbout.setText(("About..."))
        self.actionAbout_Qt.setText(("About Qt..."))
        self.actionOpen_Workflow.setText(("Open Workflow"))
        self.actionOn_2.setText(("On"))
        self.actionOff_2.setText(("Off"))
        self.actionRename_Data.setText(("Rename Data"))
        self.actionQtmodern.setText(("qtmodern"))
        self.actionDefault.setText(("Default"))
        self.actionOn.setText(("On"))
        self.actionOff.setText(("Off"))
        self.actionBrace_yourself.setText(("Brace yourself"))
        self.actionClear_Workflow.setText(("Clear Workflow"))
        self.actionSpectral_Derivative.setText(("Spectral Derivative"))
        self.actionData_Box.setText(("Data Box"))
        self.actionCombine_Data_Sets.setText(("Combine Data Sets"))
        self.actionOutlier_Removal.setText(("Remove Outliers"))
        self.actionSave_Trained_Model.setText(("Save Trained Model"))
        self.actionRestore_Trained_Model.setText(("Restore Trained Model"))
        self.actionSupervised.setText(("Supervised"))
        self.actionK_means.setText(("K-means"))
        self.actionCluster.setText(("Clustering"))
        self.actionLook_Up_Metadata.setText(("Look Up Metadata"))
        self.actionLocal_Regression.setText(("Local Regression"))
        self.actionWavelength_Shift.setText(("Wavelength Shift"))
        self.actionPlot_testmodule.setText(("plot_testmodule"))
        self.actionCalibration_Transfer.setText(("Calibration Transfer"))
        self.actionCalibration_Transfer_CV.setText(("Calibration Transfer CV"))
        self.actionSave_Regression_Model.setText(("Save Regression Model"))
        self.actionRestore_Regression_Model.setText(("Restore Regression Model"))
        self.actionStandardize_Data.setText(("Standardize"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

